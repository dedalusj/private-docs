const qs = require('querystring');
const fs = require('fs');
const jwt = require('jsonwebtoken');
const cookie = require('cookie');
const jwkToPem = require('jwk-to-pem');
const axios = require('axios');
var discoveryDocument;
var jwks;
var config = {
    AUTH_REQUEST: {
        client_id: "{{ CLIENT_ID }}",
        response_type: "code",
        scope: "openid email",
        redirect_uri: "{{ REDIRECT_URI }}",
        hd: "{{ HOSTED_DOMAIN }}"
    },
    TOKEN_REQUEST: {
        client_id: "{{ CLIENT_ID }}",
        client_secret: "{{ CLIENT_SECRET }}",
        redirect_uri: "{{ REDIRECT_URI }}",
        grant_type: "authorization_code"
    },
    PRIVATE_KEY: "{{ PRIVATE_KEY }}",
    PUBLIC_KEY: "{{ PUBLIC_KEY }}",
    DISCOVERY_DOCUMENT: "https://accounts.google.com/.well-known/openid-configuration",
    SESSION_DURATION: {{ SESSION_DURATION }},
    CALLBACK_PATH: "{{ CALLBACK_PATH }}",
    HOSTED_DOMAIN: "{{ HOSTED_DOMAIN }}",
    AUTH_METHOD: "{{ AUTH_METHOD }}",
    JSON_EMAIL_LOOKUP: "{{ EMAIL_LOOKUP }}"
};

exports.handler = (event, context, callback) => {
  if (typeof jwks == 'undefined' || typeof discoveryDocument == 'undefined') {
    // Get Discovery Document data
    axios.get(config.DISCOVERY_DOCUMENT)
      .then(function(response) {
        // Get jwks from discovery document url
        discoveryDocument = response.data;
        if (discoveryDocument.hasOwnProperty('jwks_uri')) {
          // Get public key and verify JWT
          axios.get(discoveryDocument.jwks_uri)
            .then(function(response) {
              jwks = response.data;
              // Callback to main function
              mainProcess(event, context, callback);
            })
            .catch(function(error) {
              internalServerError(error.message, callback);
            });
        } else {
          internalServerError("Unable to find JWK in discovery document.", callback);
        }
      })
      .catch(function(error) {
        internalServerError(error.message, callback);
      });
  } else {
    mainProcess(event, context, callback);
  }
};

function mainProcess(event, context, callback) {
  // Get request, request headers, and querystring dictionary
  const request = event.Records[0].cf.request;
  const headers = request.headers;
  const queryDict = qs.parse(request.querystring);
  if (event.Records[0].cf.config.hasOwnProperty('test')) {
    config.AUTH_REQUEST.redirect_uri = event.Records[0].cf.config.test;
    config.TOKEN_REQUEST.redirect_uri = event.Records[0].cf.config.test;
  }
  if (request.uri.startsWith(config.CALLBACK_PATH)) {
    /** Verify code is in querystring */
    if (!queryDict.code) {
      unauthorized("No code found.", callback);
    }
    config.TOKEN_REQUEST.code = queryDict.code;
    /** Exchange code for authorization token */
    const postData = qs.stringify(config.TOKEN_REQUEST);
    axios.post(discoveryDocument.token_endpoint, postData)
      .then(function(response) {
        const decodedData = jwt.decode(response.data.id_token, {complete: true});
        try {
          // Search for correct JWK from discovery document and create PEM
          var pem = "";
          for (var i = 0; i < jwks.keys.length; i++) {
            if (decodedData.header.kid === jwks.keys[i].kid) {
              pem = jwkToPem(jwks.keys[i]);
            }
          }
          // Verify the JWT, the payload email, and that the email ends with configured hosted domain
          jwt.verify(response.data.id_token, pem, { algorithms: ['RS256'] }, function(err, decoded) {
            if (err) {
              switch (err.name) {
                case 'TokenExpiredError':
                  redirect(request, headers, callback)
                  break;
                case 'JsonWebTokenError':
                  unauthorized('JsonWebTokenError: ' + err.message, callback);
                  break;
                default:
                  unauthorized('Unauthorized. User ' + decodedData.payload.email + ' is not permitted.', callback);
              }
            } else {
              // Once verified, create new JWT for this server
              const response = {
                "status": "302",
                "statusDescription": "Found",
                "body": "ID token retrieved.",
                "headers": {
                  "location" : [{
                    "key": "Location",
                    "value": queryDict.state
                  }],
                  "set-cookie" : [{
                    "key": "Set-Cookie",
                    "value" : cookie.serialize('TOKEN', jwt.sign(
                      { },
                      config.PRIVATE_KEY.trim(),
                      {
                        "audience": headers.host[0].value,
                        "subject": getSubject(decodedData),
                        "expiresIn": config.SESSION_DURATION,
                        "algorithm": "RS256"
                      } // Options
                    ))
                  }],
                },
              };
              callback(null, response);
            }
          });
        } catch (error) {
          internalServerError(error.message, callback);
        }
      })
      .catch(function(error) {
        internalServerError(error.message, callback);
      });
  } else if ("cookie" in headers
              && "TOKEN" in cookie.parse(headers["cookie"][0].value)) {
    // Verify the JWT, the payload email, and that the email ends with configured hosted domain
    jwt.verify(cookie.parse(headers["cookie"][0].value).TOKEN, config.PUBLIC_KEY.trim(), { algorithms: ['RS256'] }, function(err, decoded) {
      if (err) {
        switch (err.name) {
          case 'TokenExpiredError':
            redirect(request, headers, callback)
            break;
          case 'JsonWebTokenError':
            unauthorized(err.message, callback);
            break;
          default:
            unauthorized('Unauthorized. User ' + decoded.sub + ' is not permitted.', callback);
        }
      } else {
        if (config.AUTH_METHOD === "domain") {
          isDomainAuthorized(decoded, request, callback, unauthorized, internalServerError, config);
        } else if (config.AUTH_METHOD === "json-lookup") {
          isEmailAuthorized(decoded, request, callback, unauthorized, internalServerError, config);
        } else {
          internalServerError("Unknown auth method " + config.AUTH_METHOD, callback);
        }
      }
    });
  } else {
    redirect(request, headers, callback);
  }
}

function redirect(request, headers, callback) {
  var n = require('nonce')();
  config.AUTH_REQUEST.nonce = n();  
  config.AUTH_REQUEST.state = request.uri;
  // Redirect to Authorization Server
  var querystring = qs.stringify(config.AUTH_REQUEST);

  const response = {
    "status": "302",
    "statusDescription": "Found",
    "body": "Redirecting to OIDC provider",
    "headers": {
        "location" : [{
            "key": "Location",
            "value": discoveryDocument.authorization_endpoint + '?' + querystring
         }],
         "set-cookie" : [{
           "key": "Set-Cookie",
           "value" : cookie.serialize('TOKEN', '', { path: '/', expires: new Date(1970, 1, 1, 0, 0, 0, 0) })
         }],
    },
  };
  callback(null, response);
}

function unauthorized(body, callback) {
  const response = {
    "status": "401",
    "statusDescription": "Unauthorized",
    "body": body,
    "headers": {
       "set-cookie" : [{
         "key": "Set-Cookie",
         "value" : cookie.serialize('TOKEN', '', { path: '/', expires: new Date(1970, 1, 1, 0, 0, 0, 0) })
       }],
    },
  };
  callback(null, response);
}

function internalServerError(body, callback) {
  const response = {
    "status": "500",
    "statusDescription": "Internal Server Error",
    "body": body,
  };
  callback(null, response);
}

function isDomainAuthorized(decoded, request, callback, unauthorized, internalServerError, config) {
  if (decoded.sub.endsWith(config.HOSTED_DOMAIN)) {
    callback(null, request);
  } else {
    unauthorized('Unauthorized. User ' + decoded.sub + ' is not permitted.', callback);
  }
}

function isEmailAuthorized(decoded, request, callback, unauthorized, internalServerError, config) {
  axios.get(config.JSON_EMAIL_LOOKUP)
    .then(function(response) {
      if (Array.isArray(response.data) && response.data.indexOf(decoded.sub) > -1) {
        callback(null, request);
      } else {
        unauthorized('Unauthorized. User ' + decoded.sub + ' is not permitted.', callback);
      }
    })
    .catch(function(error) {
      internalServerError(error.message, callback);
    });
}

function getSubject(decoded) { 
  return decoded.payload.email; 
}